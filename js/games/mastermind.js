/**
 * –ò–≥—Ä–∞ Mastermind (–ë—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã) –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∫ 8 –º–∞—Ä—Ç–∞
 * 
 * –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤.
 * –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏:
 * - –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
 * - –ë–ª–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
 */
class Mastermind {
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É Mastermind
     * @param {HTMLElement} container - DOM-—ç–ª–µ–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–µ—â–µ–Ω–∞ –∏–≥—Ä–∞
     * @param {Function} onSuccess - –ö–æ–ª–±—ç–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
     */
    constructor(container, onSuccess) {
        this.container = container;
        this.onSuccess = onSuccess;
        this.codeLength = 4; // –î–ª–∏–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
        this.maxAttempts = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        this.currentGuess = []; // –¢–µ–∫—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–≥—Ä–æ–∫–∞
        this.attempts = []; // –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
        this.isGameOver = false; // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        
        // –°–∏–º–≤–æ–ª—ã –¥–ª—è –∫–æ–¥–∞ (—Å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π)
        this.symbols = ['üåπ', 'üíê', 'üéÅ', 'üíÑ', 'üë†', 'üíé'];
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
        this.secretCode = this._generateSecretCode();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    init() {
        this._createUI();
        this._addEventListeners();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const notificationSound = document.getElementById('notification-sound');
        if (notificationSound) {
            notificationSound.play().catch(error => console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:', error));
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
     * @private
     */
    _generateSecretCode() {
        const code = [];
        for (let i = 0; i < this.codeLength; i++) {
            const randomIndex = Math.floor(Math.random() * this.symbols.length);
            code.push(this.symbols[randomIndex]);
        }
        return code;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã
     * @private
     */
    _createUI() {
        this.container.innerHTML = `
            <div class="mastermind-container">
                <div class="game-header">
                    <h2>–®–∏—Ñ—Ä —Å–µ–π—Ñ–∞</h2>
                    <p>–†–∞–∑–≥–∞–¥–∞–π—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –∏–∑ 4 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–µ–π—Ñ —Å –Ω–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π.</p>
                    <div class="mastermind-legend">
                        <div class="mastermind-legend-item">
                            <span class="mastermind-hint exact"></span> - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
                        </div>
                        <div class="mastermind-legend-item">
                            <span class="mastermind-hint close"></span> - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
                        </div>
                    </div>
                    
                    <div class="mobile-hint-box">
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã –≤–Ω–∏–∑—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"</p>
                    </div>
                </div>
                
                <div class="mastermind-board">
                    <div class="mastermind-secret-code">
                        <div class="mastermind-code-peg hidden">?</div>
                        <div class="mastermind-code-peg hidden">?</div>
                        <div class="mastermind-code-peg hidden">?</div>
                        <div class="mastermind-code-peg hidden">?</div>
                    </div>
                    
                    <div class="mastermind-attempts"></div>
                    
                    <div class="mastermind-input">
                        <div class="mastermind-guess">
                            <div class="mastermind-guess-pegs">
                                <div class="mastermind-guess-peg empty" data-index="0"></div>
                                <div class="mastermind-guess-peg empty" data-index="1"></div>
                                <div class="mastermind-guess-peg empty" data-index="2"></div>
                                <div class="mastermind-guess-peg empty" data-index="3"></div>
                            </div>
                            <div class="mastermind-button-group">
                                <button class="check-button" disabled>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                                <button class="clear-button">–û—á–∏—Å—Ç–∏—Ç—å</button>
                            </div>
                        </div>
                        
                        <div class="mastermind-colors">
                            ${this.symbols.map(symbol => 
                                `<div class="mastermind-color" data-symbol="${symbol}">${symbol}</div>`
                            ).join('')}
                        </div>
                    </div>
                </div>
                
                <div class="game-controls">
                    <button class="reset-button">–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
                </div>
                
                <div class="game-message hidden"></div>
            </div>
        `;
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫
        this._prepareAttemptRows();
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
     * @private
     */
    _prepareAttemptRows() {
        const attemptsContainer = this.container.querySelector('.mastermind-attempts');
        attemptsContainer.innerHTML = '';
        
        for (let i = 0; i < this.maxAttempts; i++) {
            const row = document.createElement('div');
            row.className = 'mastermind-attempt-row';
            row.innerHTML = `
                <div class="mastermind-attempt-number">${i + 1}</div>
                <div class="mastermind-attempt-pegs">
                    <div class="mastermind-peg"></div>
                    <div class="mastermind-peg"></div>
                    <div class="mastermind-peg"></div>
                    <div class="mastermind-peg"></div>
                </div>
                <div class="mastermind-attempt-hints">
                    <div class="mastermind-hint"></div>
                    <div class="mastermind-hint"></div>
                    <div class="mastermind-hint"></div>
                    <div class="mastermind-hint"></div>
                </div>
            `;
            attemptsContainer.appendChild(row);
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     * @private
     */
    _addEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞
        const colorElements = this.container.querySelectorAll('.mastermind-color');
        colorElements.forEach(element => {
            element.addEventListener('click', () => {
                if (this.isGameOver) return;
                const symbol = element.dataset.symbol;
                this._addSymbolToGuess(symbol);
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const checkButton = this.container.querySelector('.check-button');
        checkButton.addEventListener('click', () => {
            if (this.isGameOver) return;
            this._checkGuess();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        const clearButton = this.container.querySelector('.clear-button');
        clearButton.addEventListener('click', () => {
            if (this.isGameOver) return;
            this._clearCurrentGuess();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
        const resetButton = this.container.querySelector('.reset-button');
        resetButton.addEventListener('click', () => {
            this._resetGame();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
        const guessPegs = this.container.querySelectorAll('.mastermind-guess-peg');
        guessPegs.forEach(peg => {
            peg.addEventListener('click', () => {
                if (this.isGameOver || peg.classList.contains('empty')) return;
                this._removeSymbolFromGuess(parseInt(peg.dataset.index));
            });
        });
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –≤ —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
     * @param {string} symbol - –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª
     * @private
     */
    _addSymbolToGuess(symbol) {
        if (this.currentGuess.length < this.codeLength) {
            this.currentGuess.push(symbol);
            this._updateGuessUI();
        }
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
     * @param {number} index - –ò–Ω–¥–µ–∫—Å —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     * @private
     */
    _removeSymbolFromGuess(index) {
        if (index >= 0 && index < this.currentGuess.length) {
            this.currentGuess.splice(index, 1);
            this._updateGuessUI();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
     * @private
     */
    _updateGuessUI() {
        const guessPegs = this.container.querySelectorAll('.mastermind-guess-peg');
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø–µ–≥–∏
        guessPegs.forEach(peg => {
            peg.textContent = '';
            peg.classList.add('empty');
        });
        
        // –ó–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        for (let i = 0; i < this.currentGuess.length; i++) {
            guessPegs[i].textContent = this.currentGuess[i];
            guessPegs[i].classList.remove('empty');
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        const checkButton = this.container.querySelector('.check-button');
        checkButton.disabled = this.currentGuess.length !== this.codeLength;
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
     * @private
     */
    _clearCurrentGuess() {
        this.currentGuess = [];
        this._updateGuessUI();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é
     * @private
     */
    _checkGuess() {
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
        const result = this._evaluateGuess(this.currentGuess);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.attempts.push({
            guess: [...this.currentGuess],
            result: result
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        this._updateAttemptsUI();
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
        this._clearCurrentGuess();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
        if (result.exact === this.codeLength) {
            this._endGame(true);
        } else if (this.attempts.length >= this.maxAttempts) {
            this._endGame(false);
        }
    }
    
    /**
     * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–Ω—ã—Ö –∏ –±–ª–∏–∑–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
     * @param {Array} guess - –¢–µ–∫—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ—á–Ω—ã—Ö –∏ –±–ª–∏–∑–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
     * @private
     */
    _evaluateGuess(guess) {
        let exact = 0;
        let close = 0;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        const codeCopy = [...this.secretCode];
        const guessCopy = [...guess];
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for (let i = 0; i < this.codeLength; i++) {
            if (guessCopy[i] === codeCopy[i]) {
                exact++;
                // –ü–æ–º–µ—á–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                codeCopy[i] = null;
                guessCopy[i] = null;
            }
        }
        
        // –ó–∞—Ç–µ–º –∏—â–µ–º –±–ª–∏–∑–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
        for (let i = 0; i < this.codeLength; i++) {
            if (guessCopy[i] !== null) {
                const indexInCode = codeCopy.indexOf(guessCopy[i]);
                if (indexInCode !== -1) {
                    close++;
                    codeCopy[indexInCode] = null;
                }
            }
        }
        
        return { exact, close };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
     * @private
     */
    _updateAttemptsUI() {
        const attemptRows = this.container.querySelectorAll('.mastermind-attempt-row');
        
        for (let i = 0; i < this.attempts.length; i++) {
            const attempt = this.attempts[i];
            const row = attemptRows[i];
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏
            const pegs = row.querySelectorAll('.mastermind-peg');
            for (let j = 0; j < this.codeLength; j++) {
                pegs[j].textContent = attempt.guess[j] || '';
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
            const hints = row.querySelectorAll('.mastermind-hint');
            let hintIndex = 0;
            
            // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            for (let j = 0; j < attempt.result.exact; j++) {
                hints[hintIndex].classList.add('exact');
                hintIndex++;
            }
            
            // –ë–ª–∏–∑–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            for (let j = 0; j < attempt.result.close; j++) {
                hints[hintIndex].classList.add('close');
                hintIndex++;
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
     * @param {boolean} success - –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
     * @private
     */
    _endGame(success) {
        this.isGameOver = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
        const secretCodePegs = this.container.querySelectorAll('.mastermind-code-peg');
        secretCodePegs.forEach((peg, index) => {
            peg.textContent = this.secretCode[index];
            peg.classList.remove('hidden');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        const messageElement = this.container.querySelector('.game-message');
        messageElement.classList.remove('hidden');
        
        if (success) {
            messageElement.textContent = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ä–∞–∑–≥–∞–¥–∞–ª–∏ –∫–æ–¥ –∏ –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ–π—Ñ!';
            messageElement.classList.add('success');
            
            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            setTimeout(() => {
                if (typeof this.onSuccess === 'function') {
                    this.onSuccess();
                }
            }, 2000);
        } else {
            messageElement.textContent = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–∞–¥–∞—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
            messageElement.classList.add('error');
        }
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–Ω–æ–≤–æ
     * @private
     */
    _resetGame() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        this.secretCode = this._generateSecretCode();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentGuess = [];
        this.attempts = [];
        this.isGameOver = false;
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
        const secretCodePegs = this.container.querySelectorAll('.mastermind-code-peg');
        secretCodePegs.forEach(peg => {
            peg.textContent = '?';
            peg.classList.add('hidden');
        });
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
        this._clearCurrentGuess();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫
        this._prepareAttemptRows();
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        const messageElement = this.container.querySelector('.game-message');
        messageElement.classList.remove('hidden', 'success', 'error');
        messageElement.textContent = '';
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { Mastermind };
} else {
    window.Mastermind = Mastermind;
}