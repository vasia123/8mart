/**
 * –ò–≥—Ä–∞ Mastermind (–ë—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã) –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∫ 8 –º–∞—Ä—Ç–∞
 */
class Mastermind {
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É Mastermind
     * @param {HTMLElement} container - DOM-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–≥—Ä—ã
     * @param {Function} [onCompleteCallback] - –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
     */
    constructor(container, onCompleteCallback = null) {
        this.container = container;
        this._onCompleteCallback = onCompleteCallback;
        this.codeLength = 4;
        this.maxAttempts = 10;
        this.currentGuess = [];
        this.attempts = [];
        this.isGameOver = false;
        this._nextHint = null; // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        
        // –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–æ–¥–∞
        this.symbols = ['üåπ', 'üíê', 'üéÅ', 'üíÑ', 'üë†', 'üíé'];
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
        this.secretCode = this._generateSecretCode();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
     */
    init() {
        this._createUI();
        this._addEventListeners();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        this._showInstructions();
        
        // –ó–≤—É–∫–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        const notificationSound = document.getElementById('notification-sound');
        if (notificationSound) {
            notificationSound.play().catch(error => console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:', error));
        }
    }

    /**
     * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∏–≥—Ä—ã
     */
    onComplete(callback) {
        this._onCompleteCallback = callback;
        return this; // –î–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
     * @param {string} hintText - –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
     */
    setNextHint(hintText) {
        this._nextHint = hintText;
        return this; // –î–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥
     * @private
     */
    _generateSecretCode() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
        const availableSymbols = [...this.symbols];
        const code = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if (this.codeLength > availableSymbols.length) {
            console.warn('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: codeLength > –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤');
            // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
            for (let i = 0; i < this.codeLength; i++) {
                const randomIndex = Math.floor(Math.random() * this.symbols.length);
                code.push(this.symbols[randomIndex]);
            }
            return code;
        }
        
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
        for (let i = availableSymbols.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [availableSymbols[i], availableSymbols[j]] = [availableSymbols[j], availableSymbols[i]];
        }
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ codeLength —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        console.log(availableSymbols.slice(0, this.codeLength));
        return availableSymbols.slice(0, this.codeLength);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã
     * @private
     */
    _createUI() {
        this.container.innerHTML = `
            <div class="mastermind-container">
                <button class="rules-button">–ü—Ä–∞–≤–∏–ª–∞</button>
                
                <div class="attempts-counter">
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: <span class="attempts-used">0</span> –∏–∑ <span class="attempts-total">${this.maxAttempts}</span>
                </div>
                
                <div class="mastermind-board">
                    <!-- –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫ -->
                    <div class="mastermind-attempts"></div>
                    
                    <!-- –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ -->
                    <div class="mastermind-input-area">
                        <div class="mastermind-guess-pegs">
                            <div class="mastermind-guess-peg empty" data-index="0"></div>
                            <div class="mastermind-guess-peg empty" data-index="1"></div>
                            <div class="mastermind-guess-peg empty" data-index="2"></div>
                            <div class="mastermind-guess-peg empty" data-index="3"></div>
                        </div>
                        
                        <!-- –°–∏–º–≤–æ–ª—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ -->
                        <div class="mastermind-colors">
                            ${this.symbols.map(symbol => 
                                `<div class="mastermind-color" data-symbol="${symbol}">${symbol}</div>`
                            ).join('')}
                        </div>
                        
                        <!-- –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ -->
                        <button class="check-button" disabled>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                    </div>
                </div>
                
                <div class="game-message hidden"></div>
            </div>
        `;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        this._updateAttemptsUI();
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–≥—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     * @private
     */
    _showInstructions() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç hintModal
        if (typeof hintModal !== 'undefined') {
            // –¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            const instructionsText = `
- –ó–∞–≥–∞–¥–∞–Ω –∫–æ–¥ –∏–∑ 4 —Å–∏–º–≤–æ–ª–æ–≤
- –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
- –ó–µ–ª–µ–Ω—ã–µ —Ç–æ—á–∫–∏: —Å–∏–º–≤–æ–ª –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
- –ñ–µ–ª—Ç—ã–µ —Ç–æ—á–∫–∏: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
- –ß–µ–º –±–æ–ª—å—à–µ –∑–µ–ª–µ–Ω—ã—Ö —Ç–æ—á–µ–∫, —Ç–µ–º –±–ª–∏–∂–µ –≤—ã –∫ —Ä–µ—à–µ–Ω–∏—é
- –£ –≤–∞—Å ${this.maxAttempts} –ø–æ–ø—ã—Ç–æ–∫
            `;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º hintModal –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª
            hintModal.showRules(instructionsText);
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
            const instructionsElement = this.container.querySelector('.mastermind-instructions');
            if (instructionsElement) {
                instructionsElement.classList.add('active');
                
                // –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ü–æ–Ω—è—Ç–Ω–æ", —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                const startButton = this.container.querySelector('.start-game-button');
                if (startButton) {
                    startButton.addEventListener('click', () => {
                        instructionsElement.classList.remove('active');
                    });
                }
            }
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     * @private
     */
    _addEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–≤–∏–ª–∞"
        const rulesButton = this.container.querySelector('.rules-button');
        rulesButton.addEventListener('click', () => {
            this._showInstructions();
        });
        
        // –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞
        const colorElements = this.container.querySelectorAll('.mastermind-color');
        colorElements.forEach(element => {
            element.addEventListener('click', () => {
                if (this.isGameOver) return;
                const symbol = element.dataset.symbol;
                this._addSymbolToGuess(symbol);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
        const checkButton = this.container.querySelector('.check-button');
        checkButton.addEventListener('click', () => {
            if (this.isGameOver) return;
            this._checkGuess();
        });
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —è—á–µ–π–∫—É
        const guessPegs = this.container.querySelectorAll('.mastermind-guess-peg');
        guessPegs.forEach(peg => {
            peg.addEventListener('click', () => {
                if (this.isGameOver || peg.classList.contains('empty')) return;
                this._removeSymbolFromGuess(parseInt(peg.dataset.index));
            });
        });
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –≤ —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
     * @private
     */
    _addSymbolToGuess(symbol) {
        if (this.currentGuess.length < this.codeLength) {
            this.currentGuess.push(symbol);
            this._updateGuessUI();
        }
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
     * @private
     */
    _removeSymbolFromGuess(index) {
        if (index >= 0 && index < this.currentGuess.length) {
            this.currentGuess.splice(index, 1);
            this._updateGuessUI();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
     * @private
     */
    _updateGuessUI() {
        const guessPegs = this.container.querySelectorAll('.mastermind-guess-peg');
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
        guessPegs.forEach(peg => {
            peg.textContent = '';
            peg.classList.add('empty');
        });
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–∏–º–≤–æ–ª–∞–º–∏
        for (let i = 0; i < this.currentGuess.length; i++) {
            guessPegs[i].textContent = this.currentGuess[i];
            guessPegs[i].classList.remove('empty');
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
        const checkButton = this.container.querySelector('.check-button');
        checkButton.disabled = this.currentGuess.length !== this.codeLength;
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
     * @private
     */
    _clearCurrentGuess() {
        this.currentGuess = [];
        this._updateGuessUI();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
     * @private
     */
    _checkGuess() {
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
        const result = this._evaluateGuess(this.currentGuess);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.attempts.push({
            guess: [...this.currentGuess],
            result: result
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this._updateAttemptsUI();
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
        this._clearCurrentGuess();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        if (result.exact === this.codeLength) {
            this._endGame(true);
        } else if (this.attempts.length >= this.maxAttempts) {
            this._endGame(false);
        }
    }
    
    /**
     * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É
     * @private
     */
    _evaluateGuess(guess) {
        let exact = 0;
        let close = 0;
        
        // –ö–æ–ø–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        const codeCopy = [...this.secretCode];
        const guessCopy = [...guess];
        
        // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for (let i = 0; i < this.codeLength; i++) {
            if (guessCopy[i] === codeCopy[i]) {
                exact++;
                codeCopy[i] = null;
                guessCopy[i] = null;
            }
        }
        
        // –ë–ª–∏–∑–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for (let i = 0; i < this.codeLength; i++) {
            if (guessCopy[i] !== null) {
                const indexInCode = codeCopy.indexOf(guessCopy[i]);
                if (indexInCode !== -1) {
                    close++;
                    codeCopy[indexInCode] = null;
                }
            }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ exact (—Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è) –∏ close (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
        return { exact, close };
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
     * @private
     */
    _createAttemptRow(attemptNumber, guess, result) {
        const row = document.createElement('div');
        row.className = 'mastermind-attempt-row';
        
        // –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
        const attemptNumberEl = document.createElement('div');
        attemptNumberEl.className = 'mastermind-attempt-number';
        attemptNumberEl.textContent = attemptNumber + 1;
        row.appendChild(attemptNumberEl);
        
        // –°–∏–º–≤–æ–ª—ã –ø–æ–ø—ã—Ç–∫–∏
        const pegsContainer = document.createElement('div');
        pegsContainer.className = 'mastermind-attempt-pegs';
        
        for (let i = 0; i < this.codeLength; i++) {
            const peg = document.createElement('div');
            peg.className = 'mastermind-peg';
            peg.textContent = guess[i];
            pegsContainer.appendChild(peg);
        }
        
        row.appendChild(pegsContainer);
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const hintsContainer = document.createElement('div');
        hintsContainer.className = 'mastermind-attempt-hints';
        
        // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–∑–µ–ª–µ–Ω—ã–µ)
        for (let i = 0; i < result.exact; i++) {
            const hint = document.createElement('div');
            hint.className = 'mastermind-hint correct';
            hint.title = '–°–∏–º–≤–æ–ª –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–∑–µ–ª–µ–Ω—ã–π)';
            hintsContainer.appendChild(hint);
        }
        
        // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∑–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–∂–µ–ª—Ç—ã–µ)
        for (let i = 0; i < result.close; i++) {
            const hint = document.createElement('div');
            hint.className = 'mastermind-hint close';
            hint.title = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–∂–µ–ª—Ç—ã–π)';
            hintsContainer.appendChild(hint);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        const emptyCount = this.codeLength - result.exact - result.close;
        for (let i = 0; i < emptyCount; i++) {
            const hint = document.createElement('div');
            hint.className = 'mastermind-hint empty';
            hintsContainer.appendChild(hint);
        }
        
        row.appendChild(hintsContainer);
        
        return row;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
     * @private
     */
    _updateAttemptsUI() {
        const attemptsContainer = this.container.querySelector('.mastermind-attempts');
        attemptsContainer.innerHTML = '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        const attemptsUsed = this.container.querySelector('.attempts-used');
        attemptsUsed.textContent = this.attempts.length;
        
        // –í—ã–¥–µ–ª—è–µ–º —Ü–∏—Ñ—Ä—É –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        const attemptsCounterEl = this.container.querySelector('.attempts-counter');
        attemptsCounterEl.innerHTML = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: <span class="attempts-used">${this.attempts.length}</span> –∏–∑ <span class="attempts-total">${this.maxAttempts}</span>`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏
        for (let i = 0; i < this.attempts.length; i++) {
            const attempt = this.attempts[i];
            const row = this._createAttemptRow(i, attempt.guess, attempt.result);
            attemptsContainer.appendChild(row);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
     * @private
     */
    _endGame(success) {
        this.isGameOver = true;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞
        const inputArea = this.container.querySelector('.mastermind-input-area');
        inputArea.style.display = 'none';
        
        if (success) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ hint-modal
            if (typeof hintModal !== 'undefined') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ, –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏
                setTimeout(() => {
                    hintModal.showSuccess('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ä–∞–∑–≥–∞–¥–∞–ª–∏ –∫–æ–¥ –∏ –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ–π—Ñ!', () => {
                        // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–∑—ã–≤–∞–µ–º callback
                        if (this._onCompleteCallback) {
                            this._onCompleteCallback();
                        }
                    });
                }, 500);
            } else {
                // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
                const messageElement = this.container.querySelector('.game-message');
                messageElement.classList.remove('hidden');
                messageElement.textContent = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ä–∞–∑–≥–∞–¥–∞–ª–∏ –∫–æ–¥ –∏ –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ–π—Ñ!';
                messageElement.classList.add('success');
                
                // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                setTimeout(() => {
                    if (this._onCompleteCallback) {
                        this._onCompleteCallback();
                    }
                }, 2000);
            }
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            const messageElement = this.container.querySelector('.game-message');
            messageElement.classList.remove('hidden');
            messageElement.textContent = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≥–∞–¥–∞—Ç—å –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
            messageElement.classList.add('error');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            const resetButton = document.createElement('button');
            resetButton.className = 'reset-button';
            resetButton.textContent = '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ';
            resetButton.addEventListener('click', () => {
                this._resetGame();
                inputArea.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ —Å–Ω–æ–≤–∞
                messageElement.classList.add('hidden');
                messageElement.classList.remove('error');
                resetButton.remove(); // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            });
            
            this.container.querySelector('.mastermind-board').appendChild(resetButton);
        }
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É
     * @private
     */
    _resetGame() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        this.secretCode = this._generateSecretCode();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentGuess = [];
        this.attempts = [];
        this.isGameOver = false;
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
        this._clearCurrentGuess();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫
        this._updateAttemptsUI();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageElement = this.container.querySelector('.game-message');
        if (messageElement) {
            messageElement.textContent = '';
            messageElement.classList.add('hidden');
            messageElement.classList.remove('success', 'error');
        }
        
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ –≤–∏–¥–∏–º–∞
        const inputArea = this.container.querySelector('.mastermind-input-area');
        if (inputArea) {
            inputArea.style.display = 'block';
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const checkButton = this.container.querySelector('.check-button');
        if (checkButton) {
            checkButton.disabled = true;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { Mastermind };
} else {
    window.Mastermind = Mastermind;
}