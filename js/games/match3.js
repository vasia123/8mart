/**
 * –ò–≥—Ä–∞ "–¢—Ä–∏ –≤ —Ä—è–¥" –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∫ 8 –º–∞—Ä—Ç–∞
 */
class Match3Game {
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É "–¢—Ä–∏ –≤ —Ä—è–¥"
     * @param {HTMLElement} container - DOM-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–≥—Ä—ã
     */
    constructor(container) {
        this.container = container;
        this._onCompleteCallback = null;
        this._nextHint = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        this.boardSize = 7; // 7x7 –ø–æ–ª–µ
        this.gemTypes = ['üå∑', 'üåπ', 'üíê', 'üéÅ', 'üíÑ', 'üíé']; // –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è 8 –º–∞—Ä—Ç–∞
        this.targetScore = 1000; // –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
        this.movesLimit = 30; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ö–æ–¥–∞–º
        
        // –ü–æ–¥—Å–∫–∞–∑–∫–∏
        this.maxHints = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        this.hintsLeft = 3; // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        this.hintTimeout = null; // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.board = [];
        this.selectedGem = null;
        this.score = 0;
        this.moves = 0;
        this.isGameOver = false;
        this.isAnimating = false;
        
        // –ú–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
        this.animatingCells = [];
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     * @param {Object} options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
     */
    init(containerId, options = {}) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if (options.difficulty === 'easy') {
            this.boardSize = 6;
            this.targetScore = 800;
            this.movesLimit = 35;
        } else if (options.difficulty === 'hard') {
            this.boardSize = 8;
            this.targetScore = 1200;
            this.movesLimit = 25;
        }
        
        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è
        if (window.innerWidth < 500) {
            this.boardSize = Math.min(this.boardSize, 6);
        }
        
        this._createUI();
        this._createBoard();
        this._renderBoard();
        this._addEventListeners();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        this._showRules();
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     * @returns {Match3Game} - –¢–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
     */
    onComplete(callback) {
        this._onCompleteCallback = callback;
        return this;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
     * @param {string} hintText - –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
     * @returns {Match3Game} - –¢–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
     */
    setNextHint(hintText) {
        this._nextHint = hintText;
        return this;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã
     * @private
     */
    _createUI() {
        this.container.innerHTML = `
            <div class="match3-container">
                <div class="game-header">
                    <h2>–í–µ—Å–µ–Ω–Ω–∏–π –±—É–∫–µ—Ç</h2>
                    <p>–°–æ–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏ –∏–ª–∏ –±–æ–ª–µ–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ä—è–¥, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å ${this.targetScore} –æ—á–∫–æ–≤!</p>
                    
                    <div class="match3-info">
                        <div class="match3-score">
                            <span class="score-label">–û—á–∫–∏:</span>
                            <span class="score-value">0</span>
                            <span class="score-target">/ ${this.targetScore}</span>
                        </div>
                        <div class="match3-moves">
                            <span class="moves-label">–•–æ–¥—ã:</span>
                            <span class="moves-value">${this.movesLimit}</span>
                        </div>
                        <div class="match3-hints">
                            <span class="hints-label">–ü–æ–¥—Å–∫–∞–∑–∫–∞:</span>
                            <button class="hint-button">–ü–æ–∫–∞–∑–∞—Ç—å —Ö–æ–¥ <span class="hints-count">${this.hintsLeft}</span></button>
                        </div>
                    </div>
                </div>
                
                <div class="match3-board-container">
                    <div class="match3-board"></div>
                    <div class="board-refresh-notice">–ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤! –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É...</div>
                </div>
                
                <div class="game-controls">
                    <button class="reset-button">–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
                    <button class="rules-button">–ü—Ä–∞–≤–∏–ª–∞</button>
                </div>
                
                <div class="game-message hidden"></div>
            </div>
        `;
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
     * @private
     */
    _showRules() {
        const rulesText = `
- –°–æ–±–µ—Ä–∏—Ç–µ —Ç—Ä–∏ –∏–ª–∏ –±–æ–ª–µ–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ä—è–¥ –∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü
- –ú–µ–Ω—è–π—Ç–µ –º–µ—Å—Ç–∞–º–∏ —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
- –ù–∞–±–µ—Ä–∏—Ç–µ ${this.targetScore} –æ—á–∫–æ–≤ –∑–∞ ${this.movesLimit} —Ö–æ–¥–æ–≤
- –ß–µ–º –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, —Ç–µ–º –±–æ–ª—å—à–µ –æ—á–∫–æ–≤
- –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ 4 –∏ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞—é—Ç –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏
- –£ –≤–∞—Å –µ—Å—Ç—å ${this.maxHints} –ø–æ–¥—Å–∫–∞–∑–∫–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ–¥
- –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤, –¥–æ—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è
        `;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (typeof hintModal !== 'undefined') {
            hintModal.showRules(rulesText);
        } else {
            // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            alert('–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n' + rulesText);
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     * @private
     */
    _addEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
        const resetButton = this.container.querySelector('.reset-button');
        resetButton.addEventListener('click', () => this._resetGame());
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª
        const rulesButton = this.container.querySelector('.rules-button');
        rulesButton.addEventListener('click', () => this._showRules());
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        const hintButton = this.container.querySelector('.hint-button');
        hintButton.addEventListener('click', () => this._showHint());
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
     * @private
     */
    _createBoard() {
        this.board = [];
        
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
        for (let row = 0; row < this.boardSize; row++) {
            this.board[row] = [];
            for (let col = 0; col < this.boardSize; col++) {
                this.board[row][col] = this._getRandomGem();
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
        this.animatingCells = Array(this.boardSize).fill().map(() => Array(this.boardSize).fill(false));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        let hasMatches = true;
        while (hasMatches) {
            const matchesInfo = this._findAllMatches();
            
            if (matchesInfo.hasMatches) {
                // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                for (const match of matchesInfo.matches) {
                    for (const { row, col } of match) {
                        this.board[row][col] = this._getRandomGem();
                    }
                }
            } else {
                hasMatches = false;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤
        this._ensureValidMovesExist();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ö–æ–¥–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     * @private
     */
    _ensureValidMovesExist() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        const possibleMoves = this._findPossibleMoves();
        
        // –ï—Å–ª–∏ —Ö–æ–¥–æ–≤ –Ω–µ—Ç, –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å–∫—É
        if (possibleMoves.length === 0) {
            this._rebuildBoard();
        }
    }
    
    /**
     * –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å–∫—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ö–æ–¥–æ–≤
     * @private
     */
    _rebuildBoard() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        this._showBoardRefreshNotice();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É
        for (let row = 0; row < this.boardSize; row++) {
            for (let col = 0; col < this.boardSize; col++) {
                this.board[row][col] = this._getRandomGem();
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        let hasMatches = true;
        while (hasMatches) {
            const matchesInfo = this._findAllMatches();
            
            if (matchesInfo.hasMatches) {
                // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                for (const match of matchesInfo.matches) {
                    for (const { row, col } of match) {
                        this.board[row][col] = this._getRandomGem();
                    }
                }
            } else {
                hasMatches = false;
            }
        }
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ–¥–æ–≤
        const possibleMoves = this._findPossibleMoves();
        if (possibleMoves.length === 0) {
            // –ï—Å–ª–∏ –æ–ø—è—Ç—å –Ω–µ—Ç —Ö–æ–¥–æ–≤, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            setTimeout(() => this._rebuildBoard(), 500);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this._renderBoard();
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏
     * @private
     */
    _showBoardRefreshNotice() {
        const notice = this.container.querySelector('.board-refresh-notice');
        notice.classList.add('visible');
        
        setTimeout(() => {
            notice.classList.remove('visible');
        }, 2000);
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –Ω–∞ –¥–æ—Å–∫–µ
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤
     * @private
     */
    _findPossibleMoves() {
        const possibleMoves = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±–º–µ–Ω—ã
        for (let row = 0; row < this.boardSize; row++) {
            for (let col = 0; col < this.boardSize; col++) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–º–µ–Ω –≤–ø—Ä–∞–≤–æ
                if (col < this.boardSize - 1) {
                    // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
                    [this.board[row][col], this.board[row][col + 1]] = 
                    [this.board[row][col + 1], this.board[row][col]];
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    const matchesInfo = this._findAllMatches();
                    if (matchesInfo.hasMatches) {
                        possibleMoves.push({
                            from: { row, col },
                            to: { row, col: col + 1 }
                        });
                    }
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
                    [this.board[row][col], this.board[row][col + 1]] = 
                    [this.board[row][col + 1], this.board[row][col]];
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–º–µ–Ω –≤–Ω–∏–∑
                if (row < this.boardSize - 1) {
                    // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
                    [this.board[row][col], this.board[row + 1][col]] = 
                    [this.board[row + 1][col], this.board[row][col]];
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    const matchesInfo = this._findAllMatches();
                    if (matchesInfo.hasMatches) {
                        possibleMoves.push({
                            from: { row, col },
                            to: { row: row + 1, col }
                        });
                    }
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
                    [this.board[row][col], this.board[row + 1][col]] = 
                    [this.board[row + 1][col], this.board[row][col]];
                }
            }
        }
        
        return possibleMoves;
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ö–æ–¥–∞
     * @private
     */
    _showHint() {
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–ª–∏ –∏–¥–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (this.hintsLeft <= 0 || this.isAnimating || this.isGameOver) return;
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        this._clearHint();
        
        // –ù–∞—Ö–æ–¥–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
        const possibleMoves = this._findPossibleMoves();
        
        if (possibleMoves.length > 0) {
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö
            const randomMove = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
            
            // –ù–∞—Ö–æ–¥–∏–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã —ç—Ç–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const gemElements = this.container.querySelectorAll('.match3-gem');
            const fromElement = [...gemElements].find(
                el => parseInt(el.dataset.row) === randomMove.from.row && 
                     parseInt(el.dataset.col) === randomMove.from.col
            );
            const toElement = [...gemElements].find(
                el => parseInt(el.dataset.row) === randomMove.to.row && 
                     parseInt(el.dataset.col) === randomMove.to.col
            );
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            if (fromElement && toElement) {
                fromElement.classList.add('hint');
                toElement.classList.add('hint');
                
                // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
                this.hintsLeft--;
                this._updateHintsCounter();
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                this.hintTimeout = setTimeout(() => {
                    this._clearHint();
                }, 3000);
            }
        } else {
            // –ï—Å–ª–∏ —Ö–æ–¥–æ–≤ –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
            this._rebuildBoard();
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏
     * @private
     */
    _clearHint() {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (this.hintTimeout) {
            clearTimeout(this.hintTimeout);
            this.hintTimeout = null;
        }
        
        // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const hintElements = this.container.querySelectorAll('.match3-gem.hint');
        hintElements.forEach(element => {
            element.classList.remove('hint');
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
     * @private
     */
    _updateHintsCounter() {
        const hintsCountElement = this.container.querySelector('.hints-count');
        hintsCountElement.textContent = this.hintsLeft;
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        const hintButton = this.container.querySelector('.hint-button');
        if (this.hintsLeft <= 0) {
            hintButton.disabled = true;
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
     * @returns {string} - –°–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
     * @private
     */
    _getRandomGem() {
        const randomIndex = Math.floor(Math.random() * this.gemTypes.length);
        return this.gemTypes[randomIndex];
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
     * @private
     */
    _renderBoard() {
        const boardElement = this.container.querySelector('.match3-board');
        boardElement.innerHTML = '';
        boardElement.style.gridTemplateColumns = `repeat(${this.boardSize}, 1fr)`;
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
        for (let row = 0; row < this.boardSize; row++) {
            for (let col = 0; col < this.boardSize; col++) {
                const gemElement = document.createElement('div');
                gemElement.className = 'match3-gem';
                gemElement.textContent = this.board[row][col];
                gemElement.dataset.row = row;
                gemElement.dataset.col = col;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                gemElement.addEventListener('click', () => {
                    this._handleGemClick(row, col, gemElement);
                });
                
                boardElement.appendChild(gemElement);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –∏ —Ö–æ–¥–æ–≤
        this._updateStats();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ—á–∫–∏, —Ö–æ–¥—ã)
     * @private
     */
    _updateStats() {
        const scoreElement = this.container.querySelector('.score-value');
        const movesElement = this.container.querySelector('.moves-value');
        
        scoreElement.textContent = this.score;
        movesElement.textContent = this.movesLimit - this.moves;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏
        const progressPercentage = Math.min(100, Math.floor((this.score / this.targetScore) * 100));
        scoreElement.style.setProperty('--progress', `${progressPercentage}%`);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
     * @param {number} row - –°—Ç—Ä–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {number} col - –°—Ç–æ–ª–±–µ—Ü —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {HTMLElement} gemElement - DOM-—ç–ª–µ–º–µ–Ω—Ç
     * @private
     */
    _handleGemClick(row, col, gemElement) {
        // –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (this.isAnimating || this.isGameOver) return;
        
        // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –∫–ª–∏–∫–µ
        this._clearHint();
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (!this.selectedGem) {
            this.selectedGem = { row, col, element: gemElement };
            gemElement.classList.add('selected');
            return;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ —ç–ª–µ–º–µ–Ω—Ç, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        if (this.selectedGem.row === row && this.selectedGem.col === col) {
            gemElement.classList.remove('selected');
            this.selectedGem = null;
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å–µ–¥–Ω–∏–µ –ª–∏ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã
        const isAdjacent = (
            (Math.abs(this.selectedGem.row - row) === 1 && this.selectedGem.col === col) ||
            (Math.abs(this.selectedGem.col - col) === 1 && this.selectedGem.row === row)
        );
        
        if (isAdjacent) {
            // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            this.selectedGem.element.classList.remove('selected');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–º–µ–Ω—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ—Å—Ç–∞–º–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            this._swapGemsWithAnimation(this.selectedGem.row, this.selectedGem.col, row, col);
            this.selectedGem = null;
        } else {
            // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —Å–æ—Å–µ–¥–Ω–∏–µ, –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            this.selectedGem.element.classList.remove('selected');
            this.selectedGem = { row, col, element: gemElement };
            gemElement.classList.add('selected');
        }
    }
    
    /**
     * –ú–µ–Ω—è–µ—Ç –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ—Å—Ç–∞–º–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     * @param {number} row1 - –°—Ç—Ä–æ–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {number} col1 - –°—Ç–æ–ª–±–µ—Ü –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {number} row2 - –°—Ç—Ä–æ–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {number} col2 - –°—Ç–æ–ª–±–µ—Ü –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @private
     */
    _swapGemsWithAnimation(row1, col1, row2, col2) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏
        this.isAnimating = true;
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const gem1 = this.board[row1][col1];
        const gem2 = this.board[row2][col2];
        
        // –ù–∞—Ö–æ–¥–∏–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
        const gemElements = this.container.querySelectorAll('.match3-gem');
        const gemElement1 = [...gemElements].find(
            el => parseInt(el.dataset.row) === row1 && parseInt(el.dataset.col) === col1
        );
        const gemElement2 = [...gemElements].find(
            el => parseInt(el.dataset.row) === row2 && parseInt(el.dataset.col) === col2
        );
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        let class1, class2;
        if (row1 === row2) {
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω
            if (col1 < col2) {
                class1 = 'swap-right';
                class2 = 'swap-left';
            } else {
                class1 = 'swap-left';
                class2 = 'swap-right';
            }
        } else {
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω
            if (row1 < row2) {
                class1 = 'swap-down';
                class2 = 'swap-up';
            } else {
                class1 = 'swap-up';
                class2 = 'swap-down';
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        gemElement1.classList.add(class1);
        gemElement2.classList.add(class2);
        
        // –ú–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ—Å—Ç–∞–º–∏ –≤ –º–æ–¥–µ–ª–∏
        this.board[row1][col1] = gem2;
        this.board[row2][col2] = gem1;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–∑—É–µ—Ç—Å—è –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞
        const matchesInfo = this._findAllMatches();
        
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞
        setTimeout(() => {
            if (matchesInfo.hasMatches) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, —É–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                gemElement1.classList.remove(class1);
                gemElement2.classList.remove(class2);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                this._renderBoard();
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                this._processMatchesWithAnimation(matchesInfo);
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤
                this.moves++;
                this._updateStats();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
                this._checkGameOver();
            } else {
                // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, –º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
                this.board[row1][col1] = gem1;
                this.board[row2][col2] = gem2;
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º "—Ç—Ä—è—Å–∫—É" –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞
                gemElement1.classList.remove(class1);
                gemElement2.classList.remove(class2);
                gemElement1.classList.add('shake');
                gemElement2.classList.add('shake');
                
                setTimeout(() => {
                    gemElement1.classList.remove('shake');
                    gemElement2.classList.remove('shake');
                    this.isAnimating = false;
                }, 500);
            }
        }, 300); // –ó–∞–¥–µ—Ä–∂–∫–∞, —Ä–∞–≤–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–µ
     * @returns {Object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
     * @private
     */
    _findAllMatches() {
        const matches = [];
        let hasMatches = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for (let row = 0; row < this.boardSize; row++) {
            let matchStart = 0;
            let matchLength = 1;
            
            for (let col = 1; col < this.boardSize; col++) {
                if (this.board[row][col] === this.board[row][col - 1]) {
                    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    matchLength++;
                } else {
                    // –ö–æ–Ω–µ—Ü —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    if (matchLength >= 3) {
                        const match = [];
                        for (let i = 0; i < matchLength; i++) {
                            match.push({ row, col: matchStart + i });
                        }
                        matches.push(match);
                        hasMatches = true;
                    }
                    
                    // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    matchStart = col;
                    matchLength = 1;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            if (matchLength >= 3) {
                const match = [];
                for (let i = 0; i < matchLength; i++) {
                    match.push({ row, col: matchStart + i });
                }
                matches.push(match);
                hasMatches = true;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for (let col = 0; col < this.boardSize; col++) {
            let matchStart = 0;
            let matchLength = 1;
            
            for (let row = 1; row < this.boardSize; row++) {
                if (this.board[row][col] === this.board[row - 1][col]) {
                    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    matchLength++;
                } else {
                    // –ö–æ–Ω–µ—Ü —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    if (matchLength >= 3) {
                        const match = [];
                        for (let i = 0; i < matchLength; i++) {
                            match.push({ row: matchStart + i, col });
                        }
                        matches.push(match);
                        hasMatches = true;
                    }
                    
                    // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    matchStart = row;
                    matchLength = 1;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ —Å—Ç–æ–ª–±—Ü–∞
            if (matchLength >= 3) {
                const match = [];
                for (let i = 0; i < matchLength; i++) {
                    match.push({ row: matchStart + i, col });
                }
                matches.push(match);
                hasMatches = true;
            }
        }
        
        return { hasMatches, matches };
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     * @param {Object} matchesInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö
     * @private
     */
    _processMatchesWithAnimation(matchesInfo) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∞–Ω–∏–º–∏—Ä—É—é—â–∏—Ö—Å—è —è—á–µ–µ–∫
        this.animatingCells = Array(this.boardSize).fill().map(() => Array(this.boardSize).fill(false));
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—è
        const gemElements = this.container.querySelectorAll('.match3-gem');
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for (const match of matchesInfo.matches) {
            // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            const points = this._addScore(match.length);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—á–∫–æ–≤
            const firstGem = match[0];
            const firstGemElement = [...gemElements].find(
                el => parseInt(el.dataset.row) === firstGem.row && parseInt(el.dataset.col) === firstGem.col
            );
            
            if (firstGemElement) {
                const pointsElement = document.createElement('div');
                pointsElement.className = 'match3-points';
                pointsElement.textContent = `+${points}`;
                
                // –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ—á–∫–æ–≤ –Ω–∞–¥ –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                const rect = firstGemElement.getBoundingClientRect();
                const boardRect = this.container.querySelector('.match3-board').getBoundingClientRect();
                
                pointsElement.style.left = `${rect.left - boardRect.left + rect.width / 2}px`;
                pointsElement.style.top = `${rect.top - boardRect.top}px`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ—á–∫–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                this.container.querySelector('.match3-board').appendChild(pointsElement);
                
                // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ—á–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
                setTimeout(() => {
                    pointsElement.remove();
                }, 1200);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            for (const { row, col } of match) {
                const gemElement = [...gemElements].find(
                    el => parseInt(el.dataset.row) === row && parseInt(el.dataset.col) === col
                );
                
                if (gemElement) {
                    // –û—Ç–º–µ—á–∞–µ–º —è—á–µ–π–∫—É –∫–∞–∫ –∞–Ω–∏–º–∏—Ä—É—é—â—É—é—Å—è
                    this.animatingCells[row][col] = true;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    gemElement.classList.add('match');
                    
                    // –ü–æ–º–µ—á–∞–µ–º —è—á–µ–π–∫–∏ –∫–∞–∫ –ø—É—Å—Ç—ã–µ –≤ –º–æ–¥–µ–ª–∏
                    this.board[row][col] = null;
                }
            }
        }
        
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        setTimeout(() => {
            // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
            gemElements.forEach(el => {
                el.classList.remove('match');
            });
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            this._fillEmptyCellsWithAnimation();
        }, 400); // –ó–∞–¥–µ—Ä–∂–∫–∞, —Ä–∞–≤–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –æ—á–∫–æ–≤
     * @param {number} matchLength - –î–ª–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
     * @returns {number} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –æ—á–∫–æ–≤
     * @private
     */
    _addScore(matchLength) {
        // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const basePoints = 10;
        
        // –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        let multiplier = 1;
        if (matchLength === 4) multiplier = 1.5;
        if (matchLength >= 5) multiplier = 2;
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
        const points = Math.floor(basePoints * matchLength * multiplier);
        this.score += points;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this._updateStats();
        
        return points;
    }
    
    /**
     * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –Ω–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
     * @private
     */
    _fillEmptyCellsWithAnimation() {
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω–∏–∑ –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –≤ –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ
        const emptyCountByColumn = Array(this.boardSize).fill(0);
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω–∏–∑
        for (let col = 0; col < this.boardSize; col++) {
            let emptyCount = 0;
            
            for (let row = this.boardSize - 1; row >= 0; row--) {
                if (this.board[row][col] === null) {
                    emptyCount++;
                } else if (emptyCount > 0) {
                    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤–Ω–∏–∑ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
                    this.board[row + emptyCount][col] = this.board[row][col];
                    this.board[row][col] = null;
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
            emptyCountByColumn[col] = emptyCount;
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä—Ö–Ω–∏–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –Ω–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        for (let col = 0; col < this.boardSize; col++) {
            for (let row = 0; row < emptyCountByColumn[col]; row++) {
                this.board[row][col] = this._getRandomGem();
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–∞–¥–µ–Ω–∏—è –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const boardElement = this.container.querySelector('.match3-board');
        
        // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for (let row = 0; row < this.boardSize; row++) {
            for (let col = 0; col < this.boardSize; col++) {
                // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                let gemElement = boardElement.querySelector(`[data-row="${row}"][data-col="${col}"]`);
                
                if (!gemElement) {
                    gemElement = document.createElement('div');
                    gemElement.className = 'match3-gem';
                    gemElement.dataset.row = row;
                    gemElement.dataset.col = col;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                    gemElement.addEventListener('click', () => {
                        this._handleGemClick(row, col, gemElement);
                    });
                    
                    boardElement.appendChild(gemElement);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                gemElement.textContent = this.board[row][col];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if (row < emptyCountByColumn[col]) {
                    gemElement.classList.add('new');
                    
                    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    setTimeout(() => {
                        gemElement.classList.remove('new');
                    }, 400);
                }
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Å–º–µ—â—ë–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                else if (this.animatingCells[row][col]) {
                    gemElement.classList.add('fall');
                    
                    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    setTimeout(() => {
                        gemElement.classList.remove('fall');
                    }, 400);
                }
            }
        }
        
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
        setTimeout(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            const newMatchesInfo = this._findAllMatches();
            
            if (newMatchesInfo.hasMatches) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
                this._processMatchesWithAnimation(newMatchesInfo);
            } else {
                // –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏
                this.isAnimating = false;
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∞–Ω–∏–º–∏—Ä—É—é—â–∏—Ö—Å—è —è—á–µ–µ–∫
                this.animatingCells = Array(this.boardSize).fill().map(() => Array(this.boardSize).fill(false));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
                const possibleMoves = this._findPossibleMoves();
                if (possibleMoves.length === 0) {
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Ö–æ–¥–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
                    this._rebuildBoard();
                }
            }
        }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
     * @private
     */
    _checkGameOver() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞
        if (this.score >= this.targetScore) {
            this._endGame(true);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ —Ö–æ–¥–æ–≤
        if (this.moves >= this.movesLimit) {
            this._endGame(false);
            return;
        }
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É
     * @param {boolean} success - –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
     * @private
     */
    _endGame(success) {
        this.isGameOver = true;
        
        if (success) {
            // –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π
            if (typeof hintModal !== 'undefined') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ, –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏
                hintModal.showSuccess('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –∏ –Ω–∞–±—Ä–∞–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤!', () => {
                    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    if (this._onCompleteCallback) {
                        this._onCompleteCallback();
                    }
                });
            } else {
                // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
                const messageElement = this.container.querySelector('.game-message');
                messageElement.textContent = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π!';
                messageElement.classList.remove('hidden');
                messageElement.classList.add('success');
                
                // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                setTimeout(() => {
                    if (this._onCompleteCallback) {
                        this._onCompleteCallback();
                    }
                }, 2000);
            }
        } else {
            // –°–æ–æ–±—â–∞–µ–º –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            if (typeof hintModal !== 'undefined') {
                hintModal.showError(`–•–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –í—ã –Ω–∞–±—Ä–∞–ª–∏ ${this.score} –∏–∑ ${this.targetScore} –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –æ—á–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`, () => {
                    this._resetGame();
                });
            } else {
                const messageElement = this.container.querySelector('.game-message');
                messageElement.textContent = `–•–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –í—ã –Ω–∞–±—Ä–∞–ª–∏ ${this.score} –∏–∑ ${this.targetScore} –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –æ—á–∫–æ–≤.`;
                messageElement.classList.remove('hidden');
                messageElement.classList.add('error');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                const resetButton = document.createElement('button');
                resetButton.className = 'reset-button';
                resetButton.textContent = '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑';
                resetButton.addEventListener('click', () => {
                    this._resetGame();
                    messageElement.classList.add('hidden');
                    messageElement.classList.remove('error');
                });
                
                messageElement.appendChild(resetButton);
            }
        }
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–Ω–æ–≤–æ
     * @private
     */
    _resetGame() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.score = 0;
        this.moves = 0;
        this.selectedGem = null;
        this.isGameOver = false;
        this.isAnimating = false;
        this.hintsLeft = this.maxHints;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        const hintButton = this.container.querySelector('.hint-button');
        hintButton.disabled = false;
        this._updateHintsCounter();
        
        // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        this._clearHint();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
        this._createBoard();
        this._renderBoard();
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const messageElement = this.container.querySelector('.game-message');
        if (messageElement) {
            messageElement.classList.add('hidden');
            messageElement.classList.remove('success', 'error');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { Match3Game };
} else {
    window.Match3Game = Match3Game;
}