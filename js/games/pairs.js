/**
 * –ò–≥—Ä–∞ "–ü–∞—Ä—ã" –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∫ 8 –º–∞—Ä—Ç–∞
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤
 */
class PairsGame {
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É –ü–∞—Ä—ã
     * @param {HTMLElement} container - DOM-—ç–ª–µ–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–µ—â–µ–Ω–∞ –∏–≥—Ä–∞
     */
    constructor(container) {
        this.container = container;
        this._onCompleteCallback = null;
        this._nextHint = null;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        this.rows = 4;
        this.cols = 4;
        this.totalPairs = 8; // rows*cols/2
        this.cards = [];
        this.flippedCards = [];
        this.matchedPairs = 0;
        this.moves = 0;
        this.isLocked = false; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        this.gameStarted = false;
        this.gameOver = false;
        
        // –°–∏–º–≤–æ–ª—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (—Ç–µ–º–∞—Ç–∏–∫–∞ 8 –º–∞—Ä—Ç–∞ –∏ –≤–µ—Å–Ω—ã) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ —ç–º–æ–¥–∑–∏
        this.symbols = [
            'üéÅ', 'üåπ', 'üíê', 'üß∏',
            'üëë', 'üíç', 'üíé', 'üå∑',
            'üçì', 'üç∞', 'ü¶ã', 'üå∫'
        ];
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     * @param {string} containerId - ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã
     * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     */
    init(containerId, options = {}) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if (options.difficulty === 'easy') {
            this.rows = 3;
            this.cols = 4;
            this.totalPairs = 6;
        } else if (options.difficulty === 'hard') {
            this.rows = 4;
            this.cols = 5;
            this.totalPairs = 10;
        } else {
            this.rows = 4;
            this.cols = 4;
            this.totalPairs = 8;
        }
        
        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        if (window.innerWidth < 500) {
            this.cols = Math.min(this.cols, 4);
            if (this.rows * this.cols > 12) {
                this.rows = 3;
                this.cols = 4;
                this.totalPairs = 6;
            }
        }
        
        this._createUI();
        this._addInlineStyles();
        this._initGame();
        this._addEventListeners();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        this._showRules();
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     * @returns {PairsGame} - –¢–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
     */
    onComplete(callback) {
        this._onCompleteCallback = callback;
        return this; // –î–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
     * @param {string} hintText - –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
     * @returns {PairsGame} - –¢–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
     */
    setNextHint(hintText) {
        this._nextHint = hintText;
        return this; // –î–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã
     * @private
     */
    _createUI() {
        this.container.innerHTML = `
            <div class="memory-container">
                <div class="game-header">
                    <h2>–ù–∞–π–¥–∏ –ø–∞—Ä—ã</h2>
                    <p>–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫</p>
                    <div class="game-controls">
                        <span class="moves-counter">–•–æ–¥–æ–≤: 0</span>
                        <span class="pairs-counter">–ü–∞—Ä—ã: 0/${this.totalPairs}</span>
                        <button class="reset-button">–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
                        <button class="rules-button">–ü—Ä–∞–≤–∏–ª–∞</button>
                    </div>
                </div>
                
                <div class="memory-board"></div>
                
                <div class="game-message hidden"></div>
            </div>
        `;
    }
    
    /**
     * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ _addInlineStyles —Å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ 
     * –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º grid-layout
     */
    _addInlineStyles() {
        const styleId = 'memory-game-inline-styles';
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const oldStyle = document.getElementById(styleId);
        if (oldStyle) {
            oldStyle.remove();
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–∞—à–µ–π –∏–≥—Ä—ã, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        const gameId = 'memory-game-' + Math.random().toString(36).substring(2, 9);
        this.container.querySelector('.memory-container').id = gameId;
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ - –≤—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã: ${this.rows} —Å—Ç—Ä–æ–∫, ${this.cols} —Å—Ç–æ–ª–±—Ü–æ–≤`);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∏–ª—è —Å –≤—ã—Å–æ–∫–æ–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å—é
        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
            /* –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∏–≥—Ä—ã Memory —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å—é */
            #${gameId} .memory-board {
                display: grid !important;
                grid-template-columns: repeat(${this.cols}, 1fr) !important;
                gap: 10px !important;
                margin: 1.5rem auto !important;
                max-width: 500px !important;
                width: 100% !important;
            }
            
            /* –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ 3D-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤ */
            #${gameId} .memory-card {
                aspect-ratio: 1 / 1 !important;
                background-color: #e84a5f !important;
                border-radius: 12px !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
                color: white !important;
                font-size: 2rem !important;
                cursor: pointer !important;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1) !important;
                transition: transform 0.2s ease, box-shadow 0.2s ease !important;
                user-select: none !important;
            }
            
            #${gameId} .memory-card:hover {
                transform: translateY(-3px) !important;
                box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15) !important;
            }
            
            /* –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */
            #${gameId} .memory-card.flipped {
                background-color: white !important;
                color: black !important;
            }
            
            /* –ù–∞–π–¥–µ–Ω–Ω–∞—è –ø–∞—Ä–∞ */
            #${gameId} .memory-card.matched {
                background-color: #f6ffed !important;
                box-shadow: 0 0 10px rgba(82, 196, 26, 0.3) !important;
                cursor: default !important;
            }
            
            #${gameId} .memory-card.matched:hover {
                transform: none !important;
            }
            
            /* –°—á–µ—Ç—á–∏–∫–∏ */
            #${gameId} .moves-counter, 
            #${gameId} .pairs-counter {
                display: inline-block !important;
                padding: 0.6rem 1rem !important;
                background-color: #f8f8f8 !important;
                border-radius: 50px !important;
                margin: 0 0.5rem !important;
                font-weight: 600 !important;
            }
            
            #${gameId} .pairs-counter {
                color: #e84a5f !important;
            }
            
            /* –°–æ–æ–±—â–µ–Ω–∏–µ */
            #${gameId} .game-message {
                width: 100% !important;
                margin-top: 1.5rem !important;
                padding: 1rem !important;
                text-align: center !important;
                border-radius: 12px !important;
                font-weight: 600 !important;
            }
            
            #${gameId} .game-message.success {
                background-color: #f6ffed !important;
                color: #52c41a !important;
                border: 1px solid #b7eb8f !important;
            }
            
            /* –°–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
            #${gameId} .hidden {
                display: none !important;
            }
            
            /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
            @media (max-width: 480px) {
                #${gameId} .memory-board {
                    gap: 8px !important;
                }
                
                #${gameId} .memory-card {
                    font-size: 1.5rem !important;
                }
                
                #${gameId} .game-controls {
                    display: flex !important;
                    flex-direction: column !important;
                    align-items: center !important;
                }
                
                #${gameId} .moves-counter, 
                #${gameId} .pairs-counter {
                    margin: 0.3rem 0 !important;
                }
                
                #${gameId} .reset-button, 
                #${gameId} .rules-button {
                    width: 100% !important;
                    margin-top: 0.5rem !important;
                }
            }
        `;
        
        document.head.appendChild(style);
    }
    
    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ _initGame, —á—Ç–æ–±—ã —è–≤–Ω–æ –∑–∞–¥–∞—Ç—å —Å–µ—Ç–∫—É
     */
    _initGame() {
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        this.cards = [];
        this.flippedCards = [];
        this.matchedPairs = 0;
        this.moves = 0;
        this.isLocked = false;
        this.gameStarted = false;
        this.gameOver = false;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        let cardSymbols = [];
        
        // –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const selectedSymbols = this._shuffleArray([...this.symbols]).slice(0, this.totalPairs);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤
        for (let i = 0; i < this.totalPairs; i++) {
            cardSymbols.push(selectedSymbols[i]);
            cardSymbols.push(selectedSymbols[i]);
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
        cardSymbols = this._shuffleArray(cardSymbols);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ—Å–∫–∏
        const boardElement = this.container.querySelector('.memory-board');
        boardElement.innerHTML = '';
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ
        boardElement.style.display = 'grid';
        boardElement.style.gridTemplateColumns = `repeat(${this.cols}, 1fr)`;
        boardElement.style.gap = '10px';
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –£–ü–†–û–©–ï–ù–ù–´–ô –ø–æ–¥—Ö–æ–¥ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for (let i = 0; i < this.rows * this.cols; i++) {
            const card = document.createElement('div');
            card.className = 'memory-card';
            card.dataset.index = i;
            card.dataset.symbol = cardSymbols[i];
            
            // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
            card.textContent = '?';
            
            this.cards.push({
                element: card,
                symbol: cardSymbols[i],
                isFlipped: false,
                isMatched: false
            });
            
            boardElement.appendChild(card);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this._updateCounters();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–∫—É —á–µ—Ä–µ–∑ setTimeout
        setTimeout(() => {
            if (window.getComputedStyle(boardElement).gridTemplateColumns.split(' ').length <= 2) {
                console.warn('–°—Ç–∏–ª–∏ —Å–µ—Ç–∫–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ');
                boardElement.style.gridTemplateColumns = `repeat(${this.cols}, 1fr) !important`;
            }
        }, 100);
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     * @private
     */
    _addEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
        const boardElement = this.container.querySelector('.memory-board');
        boardElement.addEventListener('click', (e) => {
            const cardElement = e.target.closest('.memory-card');
            if (cardElement) {
                const index = parseInt(cardElement.dataset.index);
                this._flipCard(index);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
        const resetButton = this.container.querySelector('.reset-button');
        resetButton.addEventListener('click', () => {
            this._resetGame();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª
        const rulesButton = this.container.querySelector('.rules-button');
        rulesButton.addEventListener('click', () => {
            this._showRules();
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
     * @private
     */
    _showRules() {
        // –¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª
        const rulesText = `
- –ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –ø–∞—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
- –ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å 2 –∫–∞—Ä—Ç–æ—á–∫–∏
- –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Å–æ–≤–ø–∞–¥–∞—é—Ç, –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏
- –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è
- –¶–µ–ª—å –∏–≥—Ä—ã - –Ω–∞–π—Ç–∏ –≤—Å–µ ${this.totalPairs} –ø–∞—Ä –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤
- –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∑–∞–ø–æ–º–Ω–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
        `;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (typeof hintModal !== 'undefined') {
            hintModal.showRules(rulesText);
        } else {
            // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            alert('–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n' + rulesText);
        }
    }
    
    /**
     * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
     * @param {Array} array - –ú–∞—Å—Å–∏–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
     * @returns {Array} - –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
     * @private
     */
    _shuffleArray(array) {
        const newArray = [...array];
        for (let i = newArray.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
        }
        return newArray;
    }
    
    /**
     * –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É - –£–ü–†–û–©–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è
     * @param {number} index - –ò–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏
     * @private
     */
    _flipCard(index) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞
        if (this.isLocked || 
            this.cards[index].isFlipped || 
            this.cards[index].isMatched || 
            this.flippedCards.length >= 2) {
            return;
        }
        
        // –û–±–æ–∑–Ω–∞—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
        if (!this.gameStarted) {
            this.gameStarted = true;
        }
        
        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É - –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å
        const card = this.cards[index];
        card.isFlipped = true;
        card.element.classList.add('flipped');
        card.element.textContent = card.symbol;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        this.flippedCards.push(index);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (this.flippedCards.length === 2) {
            this.moves++;
            this._updateCounters();
            this._checkMatch();
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
     * @private
     */
    _checkMatch() {
        const index1 = this.flippedCards[0];
        const index2 = this.flippedCards[1];
        
        // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (this.cards[index1].symbol === this.cards[index2].symbol) {
            // –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ —Å–æ–≤–ø–∞–≤—à–∏–µ
            this.cards[index1].isMatched = true;
            this.cards[index2].isMatched = true;
            
            this.cards[index1].element.classList.add('matched');
            this.cards[index2].element.classList.add('matched');
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä
            this.matchedPairs++;
            this._updateCounters();
            
            // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            this.flippedCards = [];
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∏–±—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if ('vibrate' in navigator) {
                navigator.vibrate(50);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã
            if (this.matchedPairs === this.totalPairs) {
                setTimeout(() => {
                    this._handleWin();
                }, 500);
            }
        } else {
            // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
            this.isLocked = true;
            
            setTimeout(() => {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                this.cards[index1].isFlipped = false;
                this.cards[index2].isFlipped = false;
                
                this.cards[index1].element.classList.remove('flipped');
                this.cards[index2].element.classList.remove('flipped');
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
                this.cards[index1].element.textContent = '?';
                this.cards[index2].element.textContent = '?';
                
                this.flippedCards = [];
                this.isLocked = false;
            }, 1000);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ —Ö–æ–¥–æ–≤ –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä
     * @private
     */
    _updateCounters() {
        const movesCounter = this.container.querySelector('.moves-counter');
        const pairsCounter = this.container.querySelector('.pairs-counter');
        
        movesCounter.textContent = `–•–æ–¥–æ–≤: ${this.moves}`;
        pairsCounter.textContent = `–ü–∞—Ä—ã: ${this.matchedPairs}/${this.totalPairs}`;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∏–≥—Ä—ã—à
     * @private
     */
    _handleWin() {
        this.gameOver = true;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
        const message = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –≤—Å–µ –ø–∞—Ä—ã –∑–∞ ${this.moves} —Ö–æ–¥–æ–≤!`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        if (typeof hintModal !== 'undefined') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            setTimeout(() => {
                hintModal.showSuccess(message, () => {
                    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    if (this._onCompleteCallback) {
                        this._onCompleteCallback();
                    }
                });
            }, 300);
        } else {
            // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
            const messageElement = this.container.querySelector('.game-message');
            messageElement.classList.remove('hidden');
            messageElement.classList.add('success');
            messageElement.textContent = message;
            
            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                if (this._onCompleteCallback) {
                    this._onCompleteCallback();
                }
            }, 2000);
        }
    }
    
    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–Ω–æ–≤–æ
     * @private
     */
    _resetGame() {
        // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫—É –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        this._initGame();
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const messageElement = this.container.querySelector('.game-message');
        messageElement.classList.add('hidden');
        messageElement.classList.remove('success', 'error');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { PairsGame };
} else {
    window.PairsGame = PairsGame;
}