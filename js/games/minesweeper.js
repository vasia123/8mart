/**
 * –ú–∏–Ω–∏-–∏–≥—Ä–∞ "–í–µ—Å–µ–Ω–Ω–∏–π —Å–∞–ø–µ—Ä"
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–ª–∞–∂–∫–æ–≤
 */
class MinesweeperGame {
    constructor() {
        this._rows = 8;
        this._cols = 8;
        this._flowers = 10;
        this._board = [];
        this._revealed = [];
        this._flagged = [];
        this._gameOver = false;
        this._container = null;
        this._completeCallback = null;
        this._firstClick = true;
        this._theme = '8march';
        this._longPressTimers = {};
        this._isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
        this._flaggedCells = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —è—á–µ–π–∫–∏ —Å —Ñ–ª–∞–∂–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∏–π
    }
    
    init(containerId, options = {}) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if (options.difficulty === 'easy') {
            this._rows = 6;
            this._cols = 6;
            this._flowers = 5;
        } else if (options.difficulty === 'hard') {
            this._rows = 9;
            this._cols = 9;
            this._flowers = 12;
        } else {
            this._rows = 8;
            this._cols = 8;
            this._flowers = 10;
        }
        
        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        if (window.innerWidth < 500) {
            this._rows = Math.min(this._rows, 8);
            this._cols = Math.min(this._cols, 8);
        }
        
        if (options.theme) {
            this._theme = options.theme;
        }
        
        this._container = document.getElementById(containerId);
        if (!this._container) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        this._container.innerHTML = '';
        this._container.className = 'game-container minesweeper-container';
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã
        const header = document.createElement('div');
        header.className = 'game-header';
        header.innerHTML = `
            <h2>–í–µ—Å–µ–Ω–Ω–∏–π —Å–∞–ø–µ—Ä</h2>
            <p>–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏, –∏–∑–±–µ–≥–∞—è —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤!</p>
            <div class="game-controls">
                <span class="flowers-counter">üå∑ ${this._flowers}</span>
                <button class="reset-button">–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
            </div>
        `;
        this._container.appendChild(header);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –¥–æ–ª–≥–æ–º –Ω–∞–∂–∞—Ç–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if (this._isTouchDevice) {
            const mobileControls = document.createElement('div');
            mobileControls.className = 'mobile-hint-box';
            mobileControls.innerHTML = `
                <p>üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–µ—Ç–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å</p>
                <p>üëÜ –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å—Ç–∞–≤–∏—Ç/—Å–Ω–∏–º–∞–µ—Ç —Ñ–ª–∞–∂–æ–∫ üö©</p>
            `;
            this._container.appendChild(mobileControls);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
        header.querySelector('.reset-button').addEventListener('click', () => this._resetGame());
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        this._revealed = Array(this._rows).fill().map(() => Array(this._cols).fill(false));
        this._flagged = Array(this._rows).fill().map(() => Array(this._cols).fill(false));
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        this._createBoard();
        this._renderBoard();
    }
    
    _createBoard() {
        this._board = Array(this._rows).fill().map(() => Array(this._cols).fill(0));
        this._firstClick = true;
    }
    
    _handleFirstClick(firstRow, firstCol) {
        this._firstClick = false;
        
        // –†–∞–∑–º–µ—â–∞–µ–º —Ü–≤–µ—Ç—ã, –∏–∑–±–µ–≥–∞—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
        let flowersPlaced = 0;
        while (flowersPlaced < this._flowers) {
            const row = Math.floor(Math.random() * this._rows);
            const col = Math.floor(Math.random() * this._cols);
            
            // –ù–µ —Å—Ç–∞–≤–∏–º —Ü–≤–µ—Ç–æ–∫ –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ –∏ –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ
            const isTooClose = Math.abs(row - firstRow) <= 1 && Math.abs(col - firstCol) <= 1;
            
            if (!isTooClose && this._board[row][col] !== 'F') {
                this._board[row][col] = 'F'; // F –¥–ª—è —Ü–≤–µ—Ç–∫–∞
                flowersPlaced++;
            }
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–∞ (—Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏)
        for (let r = 0; r < this._rows; r++) {
            for (let c = 0; c < this._cols; c++) {
                if (this._board[r][c] !== 'F') {
                    let count = 0;
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 8 —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
                    for (let dr = -1; dr <= 1; dr++) {
                        for (let dc = -1; dc <= 1; dc++) {
                            const nr = r + dr;
                            const nc = c + dc;
                            if (nr >= 0 && nr < this._rows && nc >= 0 && nc < this._cols && 
                                this._board[nr][nc] === 'F') {
                                count++;
                            }
                        }
                    }
                    this._board[r][c] = count;
                }
            }
        }
    }
    
    _renderBoard() {
        const boardElement = document.createElement('div');
        boardElement.className = 'minesweeper-board';
        boardElement.style.gridTemplateColumns = `repeat(${this._cols}, 1fr)`;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —è—á–µ–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        const isMobile = window.innerWidth < 500;
        const cellSize = isMobile 
            ? Math.min(40, Math.floor((window.innerWidth - 40) / this._cols)) // –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            : (this._cols > 8 ? 40 : 50); // –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–æ–≤
            
        this._container.style.setProperty('--cell-size', `${cellSize}px`);
        
        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –¥–æ—Å–∫–∏
        for (let r = 0; r < this._rows; r++) {
            for (let c = 0; c < this._cols; c++) {
                const cell = document.createElement('div');
                cell.className = 'minesweeper-cell';
                cell.dataset.row = r;
                cell.dataset.col = c;
                cell.dataset.cellId = `cell-${r}-${c}`;
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ –º—ã—à–∏ (–¥–ª—è desktop)
                if (!this._isTouchDevice) {
                    // –õ–µ–≤—ã–π –∫–ª–∏–∫ - –æ—Ç–∫—Ä—ã—Ç–∏–µ —è—á–µ–π–∫–∏
                    cell.addEventListener('click', (e) => {
                        // –û—Ç–∫—Ä–æ–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞ —è—á–µ–π–∫–µ –Ω–µ—Ç —Ñ–ª–∞–∂–∫–∞
                        if (!this._flagged[r][c]) {
                            this._handleCellClick(r, c);
                        }
                    });
                    
                    // –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ —Ñ–ª–∞–∂–∫–∞
                    cell.addEventListener('contextmenu', (e) => {
                        e.preventDefault();
                        this._handleRightClick(r, c);
                    });
                } else {
                    // === –î–ª—è —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ===
                    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Å–∞–Ω–∏—è
                    let touchStartTime = 0;
                    let touchStartX = 0;
                    let touchStartY = 0;
                    let longPressTriggered = false;
                    const cellId = `cell-${r}-${c}`;
                    
                    // –ü—Ä–∏ –Ω–∞—á–∞–ª–µ –∫–∞—Å–∞–Ω–∏—è
                    cell.addEventListener('touchstart', (e) => {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∫–∞—Å–∞–Ω–∏—è
                        touchStartTime = Date.now();
                        if (e.touches.length > 0) {
                            touchStartX = e.touches[0].clientX;
                            touchStartY = e.touches[0].clientY;
                        }
                        
                        longPressTriggered = false;
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
                        this._longPressTimers[cellId] = setTimeout(() => {
                            // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º –¥–æ–ª–≥–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º
                            longPressTriggered = true;
                            
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/—Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥
                            this._handleRightClick(r, c);
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏ —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                            cell.classList.add('long-press-feedback');
                            if ('vibrate' in navigator) {
                                navigator.vibrate(50);
                            }
                            
                            // –°–Ω–∏–º–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                            setTimeout(() => {
                                cell.classList.remove('long-press-feedback');
                            }, 300);
                        }, 500); // 500ms –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
                    }, { passive: true });
                    
                    // –ü—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–∞–ª—å—Ü–∞ –æ—Ç–º–µ–Ω—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                    cell.addEventListener('touchmove', (e) => {
                        if (this._longPressTimers[cellId]) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                            if (e.touches.length > 0) {
                                const touchX = e.touches[0].clientX;
                                const touchY = e.touches[0].clientY;
                                
                                // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10px, –æ—Ç–º–µ–Ω—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                                const moveDistance = Math.sqrt(
                                    Math.pow(touchX - touchStartX, 2) + 
                                    Math.pow(touchY - touchStartY, 2)
                                );
                                
                                if (moveDistance > 10) {
                                    clearTimeout(this._longPressTimers[cellId]);
                                    delete this._longPressTimers[cellId];
                                }
                            }
                        }
                    }, { passive: true });
                    
                    // –ü—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                    cell.addEventListener('touchend', (e) => {
                        // –û—Ç–º–µ–Ω—è–µ–º –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
                        if (this._longPressTimers[cellId]) {
                            clearTimeout(this._longPressTimers[cellId]);
                            delete this._longPressTimers[cellId];
                        }
                        
                        // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç–∏—è
                        const touchTime = Date.now() - touchStartTime;
                        
                        // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∏ –Ω–∞–∂–∞—Ç–∏–µ –±—ã–ª–æ –∫–æ—Ä–æ—Ç–∫–∏–º,
                        // —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–ª–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–µ—Ç–∫–∏
                        if (!longPressTriggered && touchTime < 500 && !this._flagged[r][c]) {
                            this._handleCellClick(r, c);
                        }
                    }, { passive: true });
                    
                    // –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–∞—Å–∞–Ω–∏—è –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
                    cell.addEventListener('touchcancel', (e) => {
                        if (this._longPressTimers[cellId]) {
                            clearTimeout(this._longPressTimers[cellId]);
                            delete this._longPressTimers[cellId];
                        }
                    }, { passive: true });
                }
                
                boardElement.appendChild(cell);
            }
        }
        
        this._container.appendChild(boardElement);
        this._updateBoard();
    }
    
    _updateBoard() {
        const cells = this._container.querySelectorAll('.minesweeper-cell');
        const flowersCounter = this._container.querySelector('.flowers-counter');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ü–≤–µ—Ç–æ–≤
        let flaggedCount = 0;
        for (let r = 0; r < this._rows; r++) {
            for (let c = 0; c < this._cols; c++) {
                if (this._flagged[r][c]) flaggedCount++;
            }
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        let flowerEmoji = 'üå∑';
        let flagEmoji = 'üö©';
        
        if (this._theme === '8march') {
            flowerEmoji = 'üå∑';
            flagEmoji = 'üéÄ';
        }
        
        flowersCounter.textContent = `${flowerEmoji} ${this._flowers - flaggedCount}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É
        cells.forEach(cell => {
            const r = parseInt(cell.dataset.row);
            const c = parseInt(cell.dataset.col);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã
            cell.className = 'minesweeper-cell';
            cell.textContent = '';
            
            if (this._revealed[r][c]) {
                cell.classList.add('revealed');
                
                if (this._board[r][c] === 'F') {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–≤–µ—Ç–æ–∫
                    cell.classList.add('flower');
                    cell.textContent = flowerEmoji;
                } else if (this._board[r][c] > 0) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–æ
                    cell.classList.add(`number-${this._board[r][c]}`);
                    cell.textContent = this._board[r][c];
                }
            } else if (this._flagged[r][c]) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–ª–∞–∂–æ–∫
                cell.classList.add('flagged');
                cell.textContent = flagEmoji;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Å —Ñ–ª–∞–∂–∫–∞–º–∏
                this._flaggedCells.add(`${r}-${c}`);
            } else {
                // –£–±–∏—Ä–∞–µ–º —è—á–µ–π–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å —Ñ–ª–∞–∂–∫–∞–º–∏
                this._flaggedCells.delete(`${r}-${c}`);
            }
        });
    }
    
    _handleCellClick(row, col) {
        // –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ –∏–ª–∏ –Ω–∞ —è—á–µ–π–∫–µ —Ñ–ª–∞–∂–æ–∫
        if (this._gameOver || this._flagged[row][col]) return;
        
        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫ - —Ä–∞–∑–º–µ—â–∞–µ–º —Ü–≤–µ—Ç—ã –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        if (this._firstClick) {
            this._handleFirstClick(row, col);
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É
        if (this._board[row][col] === 'F') {
            // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ü–≤–µ—Ç–æ–∫ - –ø—Ä–æ–∏–≥—Ä—ã—à
            this._revealed[row][col] = true;
            this._gameOver = true;
            this._revealAll();
            this._showMessage('–û –Ω–µ—Ç! –í—ã –Ω–∞—à–ª–∏ —Ü–≤–µ—Ç–æ–∫ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', 'error');
        } else {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
            this._revealCell(row, col);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
            if (this._checkWin()) {
                this._gameOver = true;
                this._revealAll();
                this._showMessage('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–ª–∏ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏!', 'success');
                
                // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if (this._completeCallback) {
                    setTimeout(() => {
                        this._completeCallback();
                    }, 1500);
                }
            }
        }
        
        this._updateBoard();
    }
    
    _handleRightClick(row, col) {
        if (this._gameOver || this._revealed[row][col]) return;
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥
        this._flagged[row][col] = !this._flagged[row][col];
        this._updateBoard();
        
        // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if ('vibrate' in navigator) {
            navigator.vibrate(50);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ü–≤–µ—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if (this._checkWin()) {
            this._gameOver = true;
            this._revealAll();
            this._showMessage('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—à–ª–∏ –≤—Å–µ —Ü–≤–µ—Ç—ã!', 'success');
            
            // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if (this._completeCallback) {
                setTimeout(() => {
                    this._completeCallback();
                }, 1500);
            }
        }
    }
    
    _revealCell(row, col) {
        if (row < 0 || row >= this._rows || col < 0 || col >= this._cols || 
            this._revealed[row][col]) {
            return;
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —è—á–µ–π–∫—É
        this._revealed[row][col] = true;
        
        // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è (0), –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å–µ–¥–Ω–∏–µ
        if (this._board[row][col] === 0) {
            for (let dr = -1; dr <= 1; dr++) {
                for (let dc = -1; dc <= 1; dc++) {
                    this._revealCell(row + dr, col + dc);
                }
            }
        }
    }
    
    _revealAll() {
        for (let r = 0; r < this._rows; r++) {
            for (let c = 0; c < this._cols; c++) {
                this._revealed[r][c] = true;
            }
        }
        this._updateBoard();
    }
    
    _checkWin() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç—ã –ª–∏ –≤—Å–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        let allSafeCellsRevealed = true;
        for (let r = 0; r < this._rows; r++) {
            for (let c = 0; c < this._cols; c++) {
                if (this._board[r][c] !== 'F' && !this._revealed[r][c]) {
                    allSafeCellsRevealed = false;
                    break;
                }
            }
            if (!allSafeCellsRevealed) break;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ü–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–º–µ—á–µ–Ω—ã —Ñ–ª–∞–∂–∫–∞–º–∏
        let allFlowersMarked = true;
        for (let r = 0; r < this._rows; r++) {
            for (let c = 0; c < this._cols; c++) {
                if ((this._board[r][c] === 'F' && !this._flagged[r][c]) || 
                    (this._board[r][c] !== 'F' && this._flagged[r][c])) {
                    allFlowersMarked = false;
                    break;
                }
            }
            if (!allFlowersMarked) break;
        }
        
        return allSafeCellsRevealed || allFlowersMarked;
    }
    
    _showMessage(message, type) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldMessage = this._container.querySelector('.game-message');
        if (oldMessage) oldMessage.remove();
        
        const messageElement = document.createElement('div');
        messageElement.className = `game-message ${type}`;
        messageElement.textContent = message;
        
        this._container.appendChild(messageElement);
    }
    
    _resetGame() {
        this._gameOver = false;
        this._firstClick = true;
        this._createBoard();
        this._revealed = Array(this._rows).fill().map(() => Array(this._cols).fill(false));
        this._flagged = Array(this._rows).fill().map(() => Array(this._cols).fill(false));
        this._flaggedCells.clear();
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
        for (const timerId in this._longPressTimers) {
            clearTimeout(this._longPressTimers[timerId]);
        }
        this._longPressTimers = {};
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        const message = this._container.querySelector('.game-message');
        if (message) message.remove();
        
        this._updateBoard();
    }
    
    onComplete(callback) {
        this._completeCallback = callback;
    }
}